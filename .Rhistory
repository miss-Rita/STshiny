qvalueCutoff = 0.2)
# 查看 KEGG 富集结果前几行
head(kegg_enrich)
write.csv(as.data.frame(GO_results), "KME_go_enrichment.csv", row.names = FALSE)
write.csv(as.data.frame(kegg_enrich), "KME_kegg_enrichment.csv", row.names = FALSE)
#  可视化（可选）
# GO 富集结果条形图
GO_results <- na.omit(GO_results)
# 绘制 BP（Biological Process）类别的 barplot
p1 <- barplot(GO_results$BP, showCategory = 10, main = "Biological Process")
# 绘制 MF（Molecular Function）类别的 barplot
p2 <- barplot(GO_results$MF, showCategory = 10, main = "Molecular Function")
# 绘制 CC（Cellular Component）类别的 barplot
p3 <- barplot(GO_results$CC, showCategory = 10, main = "Cellular Component")
# 如果想将图形显示在不同的图层中，可以使用 par() 来控制布局
par(mfrow = c(1, 3))  # 三个图并排显示
print(p1)
print(p2)
print(p3)
ggsave("KME_go_enrichment_barplot.pdf", p1,width = 10, height = 8)
# 如果想将图形显示在不同的图层中，可以使用 par() 来控制布局
p2 <- par(mfrow = c(1, 3))  # 三个图并排显示
print(p1)
print(p2)
print(p3)
ggsave("KME_go_enrichment_barplot.pdf", p2,width = 10, height = 8)
# 绘制 BP（Biological Process）类别的 barplot
p1 <- barplot(GO_results$BP, showCategory = 10, main = "Biological Process")
print(p1)
setwd("~/jierhuang/shiny")
#####富集分析------
# library(gground)
library(ggprism)
#####富集分析------
# library(gground)
library(ggprism)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cortex)
shiny::runApp()
View(cortex)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# 生成 SpatialFeaturePlot
sc_spatialfeatureplot <<- SpatialFeaturePlot(
cortex,
features = feature_list,
pt.size.factor = input$sc_pt_size_factor,
ncol = input$sc_ncol,
crop = FALSE
)
# 解析用户输入的特征
feature_list <- unlist(strsplit(input$sc_features, ","))  # 解析输入
runApp()
View(cortex)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(all_markers)
colnames(all_markers)
sig_gene_symbols <- all_markers[, grep("^cluster", colnames(all_markers))]
View(sig_gene_symbols)
sig_entrez <- bitr(sig_gene_symbols,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Mm.eg.db)
sig_gene_symbols <- sig_gene_symbols[,c(1,2)]
View(sig_gene_symbols)
gene_vector_all <- as.vector(as.matrix(sig_gene_symbols))
sig_entrez <- bitr(gene_vector_all,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Mm.eg.db)
sig_entrez <- bitr(sig_gene_symbols,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Mm.eg.db)
sig_gene_symbols <- as.vector(as.matrix(sig_gene_symbols))
sig_entrez <- bitr(sig_gene_symbols,
fromType = "SYMBOL",
toType = "ENTREZID",
OrgDb = org.Mm.eg.db)
failed_genes <- sig_gene_symbols[is.na(sig_entrez$ENTREZID)]
print(failed_genes)
# 查看转换结果
head(sig_entrez)
head(sig_genes)
GO <- enrichGO(gene = sig_entrez$ENTREZID,
OrgDb = org.Mm.eg.db,
ont = "ALL",  # Biological Process，可改为 "MF" 或 "CC"
pAdjustMethod = "BH",  # Benjamini-Hochberg 校正
pvalueCutoff = 0.05,
qvalueCutoff = 0.2)
View(GO)
head(GO)
#  可视化（可选）
# GO 富集结果条形图
barplot(GO, showCategory = 10)  # 显示前 10 个显著类别
kegg_enrich <- enrichKEGG(gene = sig_entrez$ENTREZID,
organism = "mmu",  # 人类gsa
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.2)
kegg_enrich <- enrichKEGG(gene = sig_entrez$ENTREZID,
organism = "mmu",  # 人类gsa
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(sig_gene_symbols)
runApp()
View(sig_gene_symbols)
sig_gene_symbols <<- all_markers[, grep("^cluster", colnames(all_markers))]
runApp()
runApp()
runApp()
runApp()
runApp()
sig_gene_symbols
runApp()
View(sig_gene_symbols)
runApp()
View(all_markers)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(scater)
BiocManager::install(scater)
BiocManager::install("scater")
suppressPackageStartupMessages(library(scater))
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(seurat_obj)
View(seurat_obj@meta.data)
View(seurat_obj)
View(seurat_obj@meta.data)
runApp()
runApp()
runApp()
t <- readRDS(./ST_text/allen_cortex.rds)
setwd("~/jierhuang/shiny/ST_text")
t <- readRDS("allen_cortex.rds")
View(t)
View(t)
View(t@meta.data)
runApp('~/jierhuang/shiny')
runApp('~/jierhuang/shiny')
runApp('~/jierhuang/shiny')
runApp('~/jierhuang/shiny')
shiny::runGitHub("shiny-phyloseq","joey711")
gc()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(DT))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(Matrix))
suppressPackageStartupMessages(library(glmGamPoi))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(tictoc))
# remotes::install_github(repo = 'genecell/COSGR')
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(COSG))
# suppressPackageStartupMessages(library(hdf5r))
suppressPackageStartupMessages(library(parallel))
suppressPackageStartupMessages(library(future))
suppressPackageStartupMessages(library(doFuture))
suppressPackageStartupMessages(library(ape))
suppressPackageStartupMessages(library(Rfast2))
# 查看当前的并行计划
nbrOfWorkers()
# 查看可用的核心数
future::availableCores()
detectCores()
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(SingleR))
suppressPackageStartupMessages(library(celldex))# 提供参考数据库
suppressPackageStartupMessages(library(SummarizedExperiment))
suppressPackageStartupMessages(library(ggsci))
suppressPackageStartupMessages(library(BiocParallel))
suppressPackageStartupMessages(library(shinycssloaders))
suppressPackageStartupMessages(library(shinybusy))
suppressPackageStartupMessages(library(shinyWidgets))
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(Seurat)) #报错
suppressPackageStartupMessages(library(irlba)) #报错
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(purrr))
suppressPackageStartupMessages(library(shinyBS))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(cowplot))
suppressPackageStartupMessages(library(patchwork))
suppressPackageStartupMessages(library(shinyalert))
suppressPackageStartupMessages(library(EnhancedVolcano))
suppressPackageStartupMessages(library(scater))
#富集分析
suppressPackageStartupMessages(library(ggprism))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(org.Mm.eg.db))
suppressPackageStartupMessages(library(org.Hs.eg.db))
suppressPackageStartupMessages(library(clusterProfiler))
options(shiny.maxRequestSize = 100000000000 * 1024^2)
# options(future.globals.maxSize = 200 * 1024^3)
# 设置并行后端（使用 4 个核心）
bp <- MulticoreParam(workers = 20)  # 使用 20 个核心
options(BioC_parallel = bp)
mytheme <- fresh::create_theme(
fresh::adminlte_color(
light_blue = "#8376a3"
),
fresh::adminlte_sidebar(
width = "250px",
dark_bg = "#2b2c34",
dark_hover_color = "#FFF",
# dark_color = "#edebf1"
dark_color = "#FFF"
),
fresh::adminlte_global(
info_box_bg = "#a89fc4"
)
)
Purples <- c("#6f6190","#78619b","#8376a3","#8e81aa","#988db2","#a399ba","#ada5c2","#b8b0ca",
"#c3bcd2","#cdc8da","#d8d3e2","#e2dfea","#edebf1","#f7f7f9")
#将锁定文件更新到当前安装的版本
#降级到锁定文件中的版本
runApp()
library(future)
detach("package:future", unload = TRUE)
library(future)
detach("package:future", unload = TRUE)
library(future)
detach("package:future", unload = TRUE)
#降级到锁定文件中的版本
# renv::restore()
install.packages("future")
library(future)
renv::update("future")
detach("package:future", unload = TRUE)
library(future)
detach("package:future", unload = TRUE)
library(future)
remove.packages("future")
install.packages("future")
library(future)
unloadNamespace("future")
remove.packages(c("Seurat", "SeuratObject", "doFuture", "future.apply"))
remove.packages("future")
install.packages("future")
install.packages(c("Seurat", "SeuratObject", "doFuture", "future.apply"))
library(future)
runApp()
runApp()
runApp()
runApp()
install.packages("future", dependencies = TRUE)
runApp()
runApp()
renv::snapshot()
BiocManager::install("Giotto")
renv::snapshot()
devtools::install_github("Giotto-project/Giotto")
install.packages("Giotto")
renv::snapshot()
runApp()
library(future)
install.packages(c("Seurat", "SeuratObject", "doFuture", "future.apply"))
detach("package:future", unload = TRUE)
library(future)
library(future)
library(future)
shiny::runApp()
library(scico)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(future)
detach("package:future", unload = TRUE)
library(future)
shiny::runApp()
View(all_markers)
cat("------数据类型",class(markers))
cat("------数据类型",class(all_markers))
View(all_markers)
runApp()
View(seurat_obj)
View(seurat_obj@meta.data)
View(cortex)
View(cortex@meta.data)
levels(seurat_obj)
cortex$cells
plot_seurat_obj <- SpatialDimPlot(seurat_obj, label = TRUE, label.size = 3, pt.size.factor = 2)
plot_sc <- SpatialDimPlot(cortex, crop = FALSE, label = TRUE, pt.size.factor = 2, label.size = 3)
View(cortex)
plot_seurat_obj
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
refdata <<- NULL
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
