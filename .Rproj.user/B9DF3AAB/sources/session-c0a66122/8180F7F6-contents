
#1 Installtion----
BiocManager::install("PAA",dependencies=TRUE)
#2 Loading PAA and importing data----
library("PAA")
targets <- read.table(file = list.files(system.file("extdata",package = "PAA"),
                                        pattern = "^targets",
                                        full.names = TRUE),header = TRUE)
print(targets[1:3,])


gpr <- system.file("extdata",package = "PAA")
targets <- list.files(system.file("extdata",package = "PAA"),
                      pattern = "dummy_targets",full.names = TRUE)
dummy.elist <-loadGPR(gpr.path=gpr,targets.path=targets,
                      array.type="ProtoArray" )
save(dummy.elist,file=paste(gpr,"/DummyData.RData",
                            sep=""),compress="xz")

targets2 <- list.files(system.file("extdata", package="PAA"),
                       pattern = "dummy_no_descr_targets", full.names=TRUE)
elist2 <- loadGPR(gpr.path=gpr, targets.path=targets2, array.type="other",
                  description="Name", description.features="^Hs~", description.discard="Empty")

cwd <- system.file(package="PAA")
dir.create(paste(cwd, "/demo/demo_output", sep=""))
output.path <- paste(cwd, "/demo/demo_output", sep="")
load(paste(cwd, "/extdata/Alzheimer.RData", sep=""))

#3 Preprocessing----
plotArray(elist=elist, idx=3, data.type="bg", log=FALSE, normalized=FALSE,
          aggregation="min", colpal="topo.colors")

plotArray(elist=elist, idx=3, data.type="fg", log=FALSE, normalized=FALSE,
          aggregation="min", colpal="topo.colors")

library(limma)
elist <- backgroundCorrect(elist, method = "normexp",
                           normexp.method ="saddle")

lot1 <- elist$targets[elist$targets$Batch=='Batch1','ArrayID']
lot2 <- elist$targets[elist$targets$Batch=='Batch2','ArrayID']
elist.bF <- batchFilter(elist=elist, lot1=lot1, lot2=lot2, log=FALSE,
                        p.thresh=0.001, fold.thresh=3)

elist.bF.a <- batchFilter.anova(elist=elist, log=FALSE, p.thresh=0.001,
                                fold.thresh=3)
elist <- elist.bF

plotNormMethods(elist=elist)


plotMAPlots(elist=elist, idx=10)

elist <- normalizeArrays(elist=elist, method="cyclicloess",
                         cyclicloess.method="fast")

elist <- batchAdjust(elist=elist, log=TRUE)

plotArray(elist=elist, idx=3, data.type="fg", log=TRUE, normalized=TRUE,
          aggregation="min", colpal="topo.colors")

elist.unlog <- elist
elist.unlog$E <- 2^(elist$E)

#4 Differential analysis----
c1 <- paste(rep("AD",20), 1:20, sep="")
c2 <- paste(rep("NDC",20), 1:20, sep="")
#volcanoPlot(elist=elist.unlog, group1=c1, group2=c2, method="tTest",
volcanoPlot(elist=elist, group1=c1, group2=c2, log=TRUE, method="tTest",
            p.thresh=0.01, fold.thresh=2)

mMs.matrix1 <- mMs.matrix2 <- mMsMatrix(x=20, y=20)
volcanoPlot(elist=elist.unlog, group1=c1, group2=c2, log=FALSE, method="mMs",
            p.thresh=0.01, fold.thresh=2, mMs.matrix1=mMs.matrix1,
            mMs.matrix2=mMs.matrix2, above=1500, between=400)

pvaluePlot(elist=elist, group1=c1, group2=c2, log=TRUE, method="tTest")

mMs.matrix1 <- mMs.matrix2 <- mMsMatrix(x=20, y=20)
pvaluePlot(elist=elist.unlog, group1=c1, group2=c2, log=FALSE, method="mMs",
           mMs.matrix1=mMs.matrix1, mMs.matrix2=mMs.matrix2, above=1500,
           between=400)

pvaluePlot(elist=elist, group1=c1, group2=c2, log=TRUE, method="tTest",
           adjust=TRUE)

pvaluePlot(elist=elist.unlog, group1=c1, group2=c2, log=FALSE, method="mMs",
           mMs.matrix1=mMs.matrix1, mMs.matrix2=mMs.matrix2, above=1500,
           between=400, adjust=TRUE)

E <- elist.unlog$E
rownames(E) <- paste(elist.unlog$genes[,1], elist.unlog$genes[,3],
                     + elist.unlog$genes[,2])
write.table(x=cbind(rownames(E),E),
            file=paste(cwd,"/demo/demo_output/data.txt", sep=""), sep="\t", eol="\n",
            row.names=FALSE, quote=FALSE)
mMs.matrix1 <- mMs.matrix2 <- mMsMatrix(x=20, y=20)

diff.analysis.results <- diffAnalysis(input=E, label1=c1, label2=c2,
                                      class1="AD", class2="NDC", output.path=output.path,
                                      mMs.matrix1=mMs.matrix1, mMs.matrix2=mMs.matrix2, above=1500,
                                      between=400)
print(diff.analysis.results[1:10,])

#5Fature perselection----
mMs.matrix1 <- mMs.matrix2 <- mMsMatrix(x=20, y=20)
pre.sel.results <- preselect(elist=elist.unlog, columns1=c1, columns2=c2,
                             label1="AD", label2="NDC", log=FALSE, discard.threshold=0.5,
                             fold.thresh=1.5, discard.features=TRUE, mMs.above=1500, mMs.between=400,
                             mMs.matrix1=mMs.matrix1, mMs.matrix2=mMs.matrix2,
                             method="mMs")
elist <- elist[-pre.sel.results$discard,]

#6 Feature selection----
selectFeatures.results <- selectFeatures(elist,n1=20,n2=20,label1="AD",
                                         label2="NDC",log=TRUE,selection.method="rf.rfe",subruns=2,
                                         candidate.number=1000,method="frequency")

selectFeatures.results <- selectFeatures(elist,n1=20,n2=20,label1="AD",
                                         label2="NDC",log=TRUE,subsamples=10,bootstraps=10,method="ensemble")


# results of frequency-based feature selection:
load(paste(cwd, "/extdata/selectFeaturesResultsFreq.RData", sep=""))
# or results of ensemble feature selection:
load(paste(cwd, "/extdata/selectFeaturesResultsEns.RData", sep=""))

#7 Results inspection
plotFeatures(features=selectFeatures.results$features, elist=elist, n1=20,
             n2=20, group1="AD", group2="NDC")

plotFeaturesHeatmap(features=selectFeatures.results$features, elist=elist,
                    n1=20, n2=20, description=TRUE)

plotFeaturesHeatmap.2(features=selectFeatures.results$features, elist=elist,
                      n1=20, n2=20, description=TRUE)

elist$E <- round(elist$E,2)
printFeatures(features=selectFeatures.results$features, elist=elist)[,-2]














