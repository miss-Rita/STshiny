library("Seurat")
library("SeuratData")
library("SeuratObject")
library("ggplot2")
library("patchwork")
library("dplyr")
library("sp")
library("Rfast2")
library("glmGamPoi")
library(Seurat)
library(SingleR)
library(celldex)  # 提供参考数据库
library(SummarizedExperiment)
library(ggsci)  
library(scico)
library(viridis)
library(Giotto)
library(devtools)
library(ggsci)
library(RColorBrewer)
library(COSG)
library(shiny)
library(EnhancedVolcano)
library(scater)
# BiocManager::install("EnhancedVolcano")
# BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
# install.packages("ClusterR")
# install.packages("gmp")
# install_github("RubD/giotto")
# 
# install.packages("ggplot2")
# install.packages("ggpubr")  # 可能需要的额外可视化工具
# install.packages("cowplot") # 兼容 ggplot2 的绘图库
# # BiocManager::install(c("SingleR", "celldex", "scRNAseq"))
# install.packages('Rfast2')
# BiocManager::install("glmGamPoi")
# # install.packages("SeuratData")
# # install.packages("remotes")  # 先安装 remotes 包（如果没有）
# # remotes::install_github("satijalab/seurat-data")
# InstallData("stxBrain")
# remotes::install_github(repo = 'genecell/COSGR')

#更新R包
update.packages(ask = FALSE)

options(future.globals.maxSize =10000000 * 1024^3) 
if (!require(shiny)) {
  install.packages("shiny")
}


brain_demo <- LoadData("stxBrain", type = "anterior1")
# saveRDS(brain_demo,"stxBrain.rds")

# coordinates <- GetTissueCoordinates(tmp, image = "anterior1")
#sctransform可以对数据进行归一化，检测高变异特征并将数据存储在SCT中。
brain_SCTransform <- SCTransform(brain_demo, assay = "Spatial", verbose = FALSE)

#降维，聚类和可视化

brain_demo <- RunPCA(brain_SCTransform, assay = "SCT", verbose = FALSE)
brain_demo <- FindNeighbors(brain_demo, reduction = "pca", dims = 1:30)
brain_demo <- FindClusters(brain_demo, verbose = FALSE)
brain_demo <- RunUMAP(brain_demo, reduction = "pca", dims = 1:30)


# marker_cosg <- cosg(
#   brain_demo,
#   groups='all',
#   assay='SCT',
#   slot='data',
#   mu=1,
#   n_genes_user=200)

marker_cosg <- cosg(
  brain_demo,
  groups='all', #考虑全部分组
  assay='SCT',
  slot='data',
  mu=1,         #惩罚项参数，值越大
  remove_lowly_expressed=TRUE,   #是否过滤低表达基因
  expressed_pct=0.1,             #设置低表达的阈值
  n_genes_user=100      #每个cluster定义Top-N个marker gene
)

library(dplyr)
library(tidyr)
marker_df <- as.data.frame(marker_cosg)
gene_cols <- grep("^names", colnames(marker_df), value = TRUE)
score_cols <- grep("^scores", colnames(marker_df), value = TRUE)

# 按照编号匹配，确保列是相邻的
ordered_cols <- as.vector(rbind(gene_cols, score_cols))

# 重新排列数据框列顺序
marker_df <- marker_df[, ordered_cols]
colnames(marker_df) <- gsub("^names", "cluster", colnames(marker_df))
top_list<-c()
for (group in colnames(marker_cosg$names)){
  top_i<-marker_cosg$names[group][1:5,1]
  top_list<-c(top_list,top_i)
}
# 
DotPlot(brain_demo,
        assay = 'SCT',
         scale=TRUE,
        features =  unique(top_list)) + RotatedAxis()
# DoHeatmap(brain_demo, 
#           assay = 'SCT',
#           features =  top_list) 

de_markers <- FindMarkers(brain_demo, ident.1 = 5, ident.2 = c(6))
SpatialFeaturePlot(object = brain_demo, features = rownames(de_markers)[1:3], alpha = c(0.1, 1), ncol = 3)

all_markers <- FindAllMarkers(object = brain_demo, test.use = "bimod",
                              only.pos = TRUE,
                              logfc.threshold = 0.25) # FC值小于0.25的marker被删除

saveRDS(all_markers,"all_markers.rds")
significant.markers  <- all_markers [all_markers $p_val_adj < 0.2, ]

top3 <- all_markers %>%
  group_by(cluster) %>%
  top_n(n = 3, wt = avg_log2FC)

#气泡图
DotPlot_plot <- DotPlot(brain_demo, features = unique(top3$gene) ,assay='SCT' ,group.by = "seurat_clusters") + 
  coord_flip() + #翻转
  theme(panel.grid = element_blank(), 
        axis.text.x=element_text(angle = 45, hjust = 0.5,vjust=0.5))+ #轴标签
  labs(x=NULL,y=NULL) + 
  guides(size = guide_legend("Percent Expression") )+ #legend
  scale_color_gradientn(colours = c('#330066','#336699','#66CC66','#FFCC33')) #颜色
DotPlot_plot



brain_demo <- FindSpatiallyVariableFeatures(brain_demo, assay = "SCT", features = VariableFeatures(brain_demo)[1:1000],
                                       selection.method = "moransi")
top.features <- head(SpatiallyVariableFeatures(brain_demo, method = "moransi"), 6)
SpatialFeaturePlot(brain_demo, features = top.features, ncol = 3, alpha = c(0.1, 1))

####注释--------------
ref_data <- MouseRNAseqData()
clusters <- brain_demo@meta.data$seurat_clusters
# 提取表达矩阵
st_counts <- GetAssayData(brain_demo, layer = "counts")
annotations <- SingleR(
  test = st_counts,  # 空间转录组数据
  ref = ref_data,    # 参考数据
  labels = ref_data$label.fine,
 
  )  # 使用主细胞类型标签
brain_demo$SingleR_labels <- annotations$labels  
brain_demo$SingleR_labels <- as.factor(brain_demo$SingleR_labels)
p <- DimPlot(brain_demo, group.by = "SingleR_labels", label = TRUE, repel = TRUE) +
  ggtitle("SingleR Automated Cell Type Annotation") +
  scale_color_npg() 
p
ggsave("singleR_annot.pdf",p,width=10,height=8)

p2 <- SpatialDimPlot(brain_demo, group.by = "SingleR_labels", label = TRUE, repel = TRUE,) +
  ggtitle("Spatial Annotation of Cell Types")
ggsave("singleR_annot_SpatialDimPlot.pdf",p2,width=10,height=8)

####手动注释-------------
genes_to_check <- c("Cd14", "Lyz2", "Itgam", "Adgre1", # 髓系细胞
                    "Fscn1", "Ccl22", "Cd209a", "Cd209c", "Clec9a",      "Ccser1", # DC细胞 # nolint
                    "Cd3e", "Cd4", "Cd8a",  # T淋巴细胞
                    "Klrb1c", "Itga2", "Klrk1", # NK细胞
                    "Col6a3", "C1s1", # Fibroblast
                    "Cd19", "Cd22", # B细胞
                    "Mcpt4", "Cma1", "Mrgprb1" # Mast cell
)
DotPlot(brain_demo, features = genes_to_check, assay = "SCT",
             group.by = "seurat_clusters") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_color_viridis_c() +  # 设置点的颜色为 viridis 配色方案
  scale_size_continuous(range = c(1, 6)) 


###差异分析----------
print(table(brain_demo$SingleR_labels, brain_demo$seurat_clusters))

# 设置感兴趣的细胞类型
cell_types_of_interest <- c("Neurons")  # 这里仅分析acinar，可扩展到其他类型

# 设置分组变量和比较组
group_var <- "SingleR_labels"  # 元数据中的分组变量名
ident.1 <- "Ependymal"  # 处理组名称
ident.2 <- "Neurons"    # 对照组名称

# 设置差异分析参数
min.pct <- 0.1  # 至少在一个组中有10%的细胞表达
logfc.threshold <- 0.25  # 对数倍变化阈值
test.use <- "wilcox"  # 使用Wilcoxon秩和检验

# 创建结果存储列表
deg_results <- list()

#DEGs
Fibroblast <- subset(brain_demo, SingleR_labels=="Neurons")

# diff_Fibroblast <- FindMarkers(Fibroblast,
#                                group.by = group_var,
#                                ident.1 = ,
#                                ident.2 = Fibroblast,
#                                min.pct = min.pct,
#                                logfc.threshold = logfc.threshold,
#                                test.use = test.use)   
diff_cluster_0_vs_1 <- FindMarkers(brain_demo,
                                   ident.1 = "Ependymal",  
                                   ident.2 = "Neurons",  
                                   group.by = "seurat_clusters",
                                   min.pct = 0.1,
                                   logfc.threshold = 0.25,
                                   test.use = "wilcox")  
sig_genes <- diff_cluster_0_vs_1[diff_cluster_0_vs_1$p_val_adj < 0.05 & abs(diff_cluster_0_vs_1$avg_log2FC) >= 0.5,]
p <- EnhancedVolcano(
  diff_cluster_0_vs_1,
  lab = rownames(diff_cluster_0_vs_1),
  x = "avg_log2FC",
  y = "p_val_adj",
  pCutoff = 0.05,
  FCcutoff = 0.5,
  pointSize = 2.0,
  labSize = 3.0,
  title = "Differential analysis by cell clusters",
  subtitle = "Wilcoxon Test",
  caption = paste("Total DEGs:",nrow(sig_genes)),
  legendPosition = "right",
  #selectLab = sig_genes  # 只标记显著基因
)
print(p)


#####富集分析------
# library(gground)
library(ggprism)
library(tidyverse)
library(org.Hs.eg.db)
library(clusterProfiler)
library(org.Mm.eg.db)



sig_gene_symbols <- rownames(sig_genes)


sig_gene_symbols <- all_markers[, grep("^cluster", colnames(all_markers))]

sig_gene_symbols <- sig_gene_symbols[,c(1,2)]

sig_gene_symbols <- as.vector(as.matrix(sig_gene_symbols))

sig_entrez <- bitr(sig_gene_symbols, 
                   fromType = "SYMBOL", 
                   toType = "ENTREZID", 
                   OrgDb = org.Mm.eg.db)

failed_genes <- sig_gene_symbols[is.na(sig_entrez$ENTREZID)]
print(failed_genes)
# 查看转换结果
head(sig_entrez)
head(sig_genes)

GO <- enrichGO(gene = sig_entrez$ENTREZID,
               OrgDb = org.Mm.eg.db, 
               ont = "ALL",  # Biological Process，可改为 "MF" 或 "CC"
               pAdjustMethod = "BH",  # Benjamini-Hochberg 校正
               pvalueCutoff = 0.05,
               qvalueCutoff = 0.2)
head(GO)

kegg_enrich <- enrichKEGG(gene = sig_entrez$ENTREZID,
                          organism = "mmu",  # 人类gsa
                          pAdjustMethod = "BH",
                          pvalueCutoff = 0.05,
                          qvalueCutoff = 0.2)

# 查看 KEGG 富集结果前几行
head(kegg_enrich)
write.csv(as.data.frame(GO), "go_enrichment.csv", row.names = FALSE)
write.csv(as.data.frame(kegg_enrich), "kegg_enrichment.csv", row.names = FALSE)
#  可视化（可选）
# GO 富集结果条形图
barplot(GO, showCategory = 10)  # 显示前 10 个显著类别
ggsave("go_enrichment_barplot.pdf", width = 10, height = 8)

# KEGG 富集结果点图
dotplot(kegg_enrich, showCategory = 10)  # 显示前 10 个显著通路
ggsave("kegg_enrichment_dotplot.pdf", width = 10, height = 8)

###-----------------------------------------------------------------------------
brain_coordinates <- data.frame(cells = brain_demo@images$anterior1$centroids@cells, 
                                spatial_coord_x = brain_demo@images$anterior1$centroids@coords[, 1], 
                                spatial_coord_y = brain_demo@images$anterior1$centroids@coords[, 2])

brain_demo@meta.data$cells <- rownames(brain_demo@meta.data)
brain_demo@meta.data <- merge(brain_demo@meta.data, brain_coordinates, by = "cells")
rownames(brain_demo@meta.data) <- brain_demo@meta.data$cells



cortex <- subset(brain_demo, idents = c(1, 2, 3, 4, 6, 7))
SpatialDimPlot(brain_demo, label = TRUE, label.size = 3)
SpatialDimPlot(cortex, crop = FALSE, label = TRUE, pt.size.factor = 2, label.size = 3)
# SpatialDimPlot(cortex, crop = TRUE, label = TRUE, interactive =T) 


SpatialDimPlot(cortex,cells.highlight = WhichCells(cortex, expression = image_imagerow > 400 | image_imagecol < 150))

cells <- cortex@meta.data %>% 
  dplyr::filter(spatial_coord_x < 7360 & spatial_coord_y > 3230) %>% 
  dplyr::filter(!(seurat_clusters == 3 & spatial_coord_y > 7700 & spatial_coord_x > 4730)) %>% 
  dplyr::filter(!(seurat_clusters == 1 & spatial_coord_y > 6000 & spatial_coord_x > 5000))

cortex <- subset(cortex, cells = cells$cells)
p1 <- SpatialDimPlot(cortex, crop = TRUE, label = TRUE,pt.size.factor = 3, label.size = 2)
p2 <- SpatialDimPlot(cortex, crop = FALSE, label = TRUE, pt.size.factor = 2, label.size = 2)
p1 + p2

# now remove additional cells, use SpatialDimPlots to visualize what to remove
# SpatialDimPlot(cortex,cells.highlight = WhichCells(cortex, expression = image_imagerow > 400
# | image_imagecol < 150))
# cortex <- subset(cortex, image_slice1_imagerow > 400 | image_slice1_imagecol < 150, invert = TRUE)
# cortex <- subset(cortex, slice1_imagerow > 275 & slice1_imagecol > 370, invert = TRUE)
# cortex <- subset(cortex, anterior1_imagerow > 250 & anterior1_imagecol > 440, invert = TRUE)






allen_reference <- readRDS("allen_cortex.rds")
# note that setting ncells=3000 normalizes the full dataset but learns noise models on 3k
# cells this speeds up SCTransform dramatically with no loss in performance
library(dplyr)

# 计算代码执行时间

  allen_reference <- SCTransform(allen_reference, ncells = 3000, verbose = FALSE) 
  saveRDS(allen_reference,"allen_reference.rds")
  
  allen_reference <- RunPCA(allen_reference,verbose = FALSE) 
  allen_reference <- RunUMAP(allen_reference,Reduction="pca",dims = 1:30)


# 输出执行时间（约9分钟）
print(execution_time)


# After subsetting, we renormalize cortex
cortex <- SCTransform(cortex, assay = "Spatial", verbose = FALSE) %>%
  RunPCA(verbose = FALSE)
# the annotation is stored in the 'subclass' column of object metadata
DimPlot(allen_reference, group.by = "subclass", label = TRUE)


anchors <- FindTransferAnchors(reference = allen_reference, query = cortex, normalization.method = "SCT")
predictions.assay <- TransferData(anchorset = anchors, refdata = allen_reference$subclass, prediction.assay = TRUE,
                                  weight.reduction = cortex[["pca"]], dims = 1:30)

cortex[["predictions"]] <- predictions.assay


DefaultAssay(cortex) <<- "predictions"

SpatialFeaturePlot(cortex, features = c("L2/3 IT", "L4"), pt.size.factor = 3, ncol = 2, crop = TRUE)


cortex <<- FindSpatiallyVariableFeatures(cortex, assay = "predictions", selection.method = "moransi",
                                        features = rownames(cortex), r.metric = 5, slot = "data")
#检查moransi.spatially.variable.rank是否创建成功
colnames(cortex[["predictions"]]@meta.features)

#输出top cluster，可以输出前10个，或者几个，最好更多。
top.clusters <- rownames(slice_min(cortex[["predictions"]]@meta.features, order_by = cortex[["predictions"]]@meta.features$moransi.spatially.variable.rank, n = 4))

top.clusters


SpatialPlot(object = cortex, features = top.clusters, ncol = 2,pt.size.factor = 3)

SpatialFeaturePlot(cortex, features = c("Astro", "L2/3 IT", "L4", "L5 PT", "L5 IT", "L6 CT", "L6 IT",
                                        "L6b", "Oligo"), pt.size.factor = 1, ncol = 2, crop = FALSE, alpha = c(0.1, 1))



#####细胞注释自建库数据转换-----
library(Seurat)
library(SummarizedExperiment)

# 假设 allen_reference 是你的 Seurat 对象
# 提取表达矩阵（assay data）
expr_matrix <- as.matrix(allen_reference[["SCT"]]@data)  # 假设使用的是 RNA assay

# 提取元数据（例如细胞注释等）
cell_metadata <- allen_reference@meta.data

# 提取基因注释（如果需要，可以使用 rownames() 来作为基因ID）
gene_metadata <- data.frame(gene_id = rownames(expr_matrix))

# 创建 SummarizedExperiment 对象
ref_data <- SummarizedExperiment(
  assays = list(counts = expr_matrix),  # 或者根据需求用不同的矩阵
  colData = cell_metadata,  # 细胞的元数据
  rowData = gene_metadata   # 基因的元数据
)

# 查看转换后的对象
class(ref_data)  # 应该是 "SummarizedExperiment"


####转换数据方法2----

allen_reference$celltype <- allen_reference$subclass
table(allen_reference$celltype)
# 读入参考数据集 -------
ref <- NormalizeData(allen_reference)
Refassay <- log1p(AverageExpression(ref, verbose = FALSE)$RNA)#求细胞的平均表达
#Ref <- textshape::column_to_rownames(Ref, loc = 1)#另一种得到参考矩阵的办法
head(ref)#看看表达矩阵长啥样



st_counts <- GetAssayData(brain_demo, layer = "counts")
annotations <- SingleR(
  test = st_counts,  # 空间转录组数据
  ref = allen_reference,    # 参考数据
  labels = allen_reference$subclass)  # 使用主细胞类型标签
brain_demo$SingleR_labels <- annotations$labels  
brain_demo$SingleR_labels <- as.factor(brain_demo$SingleR_labels)



###尝试自己创建一个参考数据集----
raw_data 

annot 

#构建ref
KUL3_mye_count=annot[["SCT"]]@counts
annot@meta.data$Index <- rownames(annot@meta.data)
pdata=annot@meta.data[,c("Index","SingleR_labels")]
rownames(pdata)=pdata$Index
pdata$Index=NULL
colnames(pdata)="ref_label"

ref_SE <- SummarizedExperiment(assays=list(counts=KUL3_mye_count),colData = pdata) 
#创建SummarizedExperiment对象
ref_SE <- logNormCounts(ref_SE) 
#Compute log-transformed normalized expression values，要有这一行，对于单细胞数据normalize之后会再算一个log

saveRDS(ref_SE,"ref_SE.rds")

ref_SE <- readRDS(ref_SE.rds)

raw_data_count=raw_data[["SCT"]]@counts

#需要取不同数据集的基因交集
common_gene <- intersect(rownames(raw_data_count), rownames(ref_SE))
ref_SE <- ref_SE[common_gene,]
raw_data_count <- raw_data_count[common_gene,]

#也要创建SummarizedExperiment对象，以及log normalize
raw_data_SE <- SummarizedExperiment(assays=list(counts=raw_data_count))
raw_data_SE <- logNormCounts(raw_data_SE)

singleR_res <- SingleR(test = raw_data_SE, ref = ref_SE, labels = ref_SE$ref_label)

anno_df <- as.data.frame(singleR_res$labels)
anno_df$Index <- rownames(singleR_res)

colnames(anno_df)[1] <- 'ref_label_from_brain'


#将注释信息添加到Seurat对象
raw_data@meta.data$Index <- rownames(raw_data@meta.data)
raw_data@meta.data=raw_data@meta.data%>%inner_join(anno_df,by="Index")
rownames(raw_data@meta.data)=raw_data@meta.data$Index

DimPlot(raw_data, reduction = "umap", group.by = "ref_label_from_brain", pt.size=2)+
  DimPlot(annot, reduction = "umap", group.by = "SingleR_labels", pt.size=2)





